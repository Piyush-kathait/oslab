#include <stdio.h>
struct Process {
    int id;
    int burst_time;
    int remaining_time;
    int arrival_time;
    int turnaround_time;
    int waiting_time;
    int response_time;
};

int main() {
    int n; // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    int time = 0; // Current time
    int completed = 0; // Number of completed processes
    int context_switches = 0; // Number of context switches
    int total_turnaround_time = 0; // Total Turnaround Time
    int total_waiting_time = 0; // Total Waiting Time
    int total_response_time = 0; // Total Response Time

    while (completed < n) {
        int selected_process = -1;
        int max_remaining_time = -1;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= time && processes[i].remaining_time > max_remaining_time) {
                selected_process = i;
                max_remaining_time = processes[i].remaining_time;
            }
        }

        if (selected_process == -1) {
            time++;
            continue;
        }

        // Process selected
        if (processes[selected_process].remaining_time == processes[selected_process].burst_time) {
            processes[selected_process].response_time = time - processes[selected_process].arrival_time;
            context_switches++;
        }

        time++;
        processes[selected_process].remaining_time--;

        if (processes[selected_process].remaining_time == 0) {
            // Process completed
            completed++;
            processes[selected_process].turnaround_time = time - processes[selected_process].arrival_time;
            processes[selected_process].waiting_time = processes[selected_process].turnaround_time - processes[selected_process].burst_time;
            total_turnaround_time += processes[selected_process].turnaround_time;
            total_waiting_time += processes[selected_process].waiting_time;
            total_response_time += processes[selected_process].response_time;
        }
    }

    // Calculate averages
    float avg_turnaround_time = (float)total_turnaround_time / n;
    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_response_time = (float)total_response_time / n;

    printf("Number of Context Switches: %d\n", context_switches);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Response Time: %.2f\n", avg_response_time);

    return 0;
}
