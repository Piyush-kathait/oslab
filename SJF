#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
// Structure to represent a process
struct Process
{
    int id;              // Process ID
    int arrival_time;    // Arrival Time
    int burst_time;      // Burst Time
    int completion_time; // Completion Time
    int turnaround_time; // Turnaround Time
    int waiting_time;    // Waiting Time
    int response_time;   // Response Time
    int executed;        // Flag to track if the process has executed
};

// Function to perform SJF scheduling
void SJF(struct Process processes[], int n)
{
    int time = 0;                  // Current time
    int completed = 0;             // Number of completed processes
    int total_waiting_time = 0;    // Total Waiting Time
    int total_turnaround_time = 0; // Total Turnaround Time
    int total_response_time = 0;   // Total Response Time
    int context_switches = 0;      // Number of context switches

    while (completed < n)
    {
        int shortest = -1;
        int min_burst = INT_MAX;
        // Find the shortest job that has arrived and not executed
        for (int i = 0; i < n; i++)
        {
            if (processes[i].arrival_time <= time && !processes[i].executed && processes[i].burst_time < min_burst)
            {
                shortest = i;
                min_burst = processes[i].burst_time;
            }
        }

        if (shortest == -1)
        {
            // No process is ready to execute, increment time
            time++;
        }
        else
        {
            // Execute the shortest job
            processes[shortest].executed = 1;
            context_switches++;

            // Update turnaround time, waiting time, and completion time
            processes[shortest].completion_time = time + processes[shortest].burst_time;
            processes[shortest].turnaround_time = processes[shortest].completion_time - processes[shortest].arrival_time;
            processes[shortest].waiting_time = processes[shortest].turnaround_time - processes[shortest].burst_time;
            processes[shortest].response_time = time - processes[shortest].arrival_time;

            // Update total metrics
            total_turnaround_time += processes[shortest].turnaround_time;
            total_waiting_time += processes[shortest].waiting_time;
            total_response_time += processes[shortest].response_time;

            // Move time forward
            time = processes[shortest].completion_time;
            // Increment the completed counter
            completed++;
        }
    }

    // Calculate averages
    double avg_turnaround_time = (double)total_turnaround_time / n;
    double avg_waiting_time = (double)total_waiting_time / n;
    double avg_response_time = (double)total_response_time / n;

    // Print results
    printf("Number of Context Switches: %d\n", context_switches);
    printf("Average Turnaround Time: %.2lf\n", avg_turnaround_time);
    printf("Average Waiting Time: %.2lf\n", avg_waiting_time);
    printf("Average Response Time: %.2lf\n", avg_response_time);
}

int main()
{
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++)
    {
        processes[i].id = i + 1;
        printf("Enter Arrival Time for Process P%d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter Burst Time for Process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("\n");
        processes[i].executed = 0;
    }

    // Perform SJF scheduling
    SJF(processes, n);

    return 0;
}
